"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

exports.requireParser = requireParser;
exports.mixinParser = mixinParser;
exports.nameParser = nameParser;
exports.propsParser = propsParser;
Object.defineProperty(exports, "__esModule", {
  value: true
});

var estraverse = _interopRequire(require("estraverse"));

function requireParser(ast) {
  if (!ast) {
    return ast;
  }

  var deps = [];
  estraverse.traverse(ast, {
    enter: function enter(node, parent) {
      if (node.type === "Identifier" && node.name === "require" && parent.type === "CallExpression") {
        deps.push(parent.arguments[0].value);
      }
    }
  });

  return deps;
}

function mixinParser(ast) {
  if (!ast) {
    return ast;
  }

  var mixins = [];
  estraverse.traverse(ast, {
    enter: function enter(node, parent) {
      if (node.type === "Identifier" && node.name === "mixins" && parent.type === "Property") {
        parent.value.elements.forEach(function (el) {
          mixins.push(el.name);
        });

        this["break"]();
      }
    }
  });

  return mixins;
}

function nameParser(ast) {
  if (!ast) {
    return ast;
  }

  var name = "<<anonymous>>";
  estraverse.traverse(ast, {
    enter: function enter(node, parent) {
      if (node.type === "Identifier" && node.value === "displayName" && parent.type === "Property") {
        name = parent.value.value;

        this["break"]();
      }
    }
  });

  return name;
}

function propsParser(ast, sourceCode) {
  if (!ast) {
    return ast;
  }

  var props = {};
  estraverse.traverse(ast, {
    enter: function enter(node, parent) {
      if (node.type === "Identifier" && node.name === "PropTypes") {
        var propTypes = parent.value.properties;

        propTypes.forEach(function (item) {
          var propName = item.key.name;
          var propType = item.value;

          props[propName] = {};
          props[propName].type = sourceCode.slice(propType.start, propType.end);
        });

        this["break"]();
      }
    }
  });

  return props;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJzZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztRQUVnQixhQUFhLEdBQWIsYUFBYTtRQWtCYixXQUFXLEdBQVgsV0FBVztRQXFCWCxVQUFVLEdBQVYsVUFBVTtRQW1CVixXQUFXLEdBQVgsV0FBVzs7Ozs7SUE1RHBCLFVBQVUsMkJBQU0sWUFBWTs7QUFFNUIsU0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFO0FBQ2pDLE1BQUksQ0FBQyxHQUFHLEVBQUU7QUFDUixXQUFPLEdBQUcsQ0FBQztHQUNaOztBQUVELE1BQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNkLFlBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLFNBQUssRUFBQyxlQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDbkIsVUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLGdCQUFnQixFQUFFO0FBQzdGLFlBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUN0QztLQUNGO0dBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sSUFBSSxDQUFDO0NBQ2I7O0FBR00sU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFO0FBQy9CLE1BQUksQ0FBQyxHQUFHLEVBQUU7QUFDUixXQUFPLEdBQUcsQ0FBQztHQUNaOztBQUVELE1BQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNoQixZQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFLLEVBQUMsZUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO0FBQ25CLFVBQUksSUFBSSxDQUFDLElBQUksS0FBSyxZQUFZLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7QUFDdEYsY0FBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsRUFBRSxFQUFLO0FBQ3BDLGdCQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QixDQUFDLENBQUM7O0FBRUgsWUFBSSxTQUFNLEVBQUUsQ0FBQztPQUNkO0tBQ0Y7R0FDRixDQUFDLENBQUM7O0FBRUgsU0FBTyxNQUFNLENBQUM7Q0FDZjs7QUFFTSxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDOUIsTUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNSLFdBQU8sR0FBRyxDQUFDO0dBQ1o7O0FBRUQsTUFBSSxJQUFJLEdBQUcsZUFBZSxDQUFDO0FBQzNCLFlBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLFNBQUssRUFBQyxlQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDbkIsVUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtBQUM1RixZQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7O0FBRTFCLFlBQUksU0FBTSxFQUFFLENBQUM7T0FDZDtLQUNGO0dBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sSUFBSSxDQUFDO0NBQ2I7O0FBRU0sU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRTtBQUMzQyxNQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1IsV0FBTyxHQUFHLENBQUM7R0FDWjs7QUFFRCxNQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDZixZQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFLLEVBQUMsZUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO0FBQ25CLFVBQUksSUFBSSxDQUFDLElBQUksS0FBSyxZQUFZLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7QUFDM0QsWUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7O0FBRXhDLGlCQUFTLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSSxFQUFLO0FBQzFCLGNBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzdCLGNBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7O0FBRTFCLGVBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDckIsZUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZFLENBQUMsQ0FBQzs7QUFFSCxZQUFJLFNBQU0sRUFBRSxDQUFDO09BQ2Q7S0FDRjtHQUNGLENBQUMsQ0FBQzs7QUFFSCxTQUFPLEtBQUssQ0FBQztDQUNkIiwiZmlsZSI6InNyYy9wYXJzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXN0cmF2ZXJzZSBmcm9tICdlc3RyYXZlcnNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVQYXJzZXIoYXN0KSB7XG4gIGlmICghYXN0KSB7XG4gICAgcmV0dXJuIGFzdDtcbiAgfVxuXG4gIHZhciBkZXBzID0gW107XG4gIGVzdHJhdmVyc2UudHJhdmVyc2UoYXN0LCB7XG4gICAgZW50ZXIgKG5vZGUsIHBhcmVudCkge1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmIG5vZGUubmFtZSA9PT0gJ3JlcXVpcmUnICYmIHBhcmVudC50eXBlID09PSAnQ2FsbEV4cHJlc3Npb24nKSB7XG4gICAgICAgIGRlcHMucHVzaChwYXJlbnQuYXJndW1lbnRzWzBdLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkZXBzO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBtaXhpblBhcnNlcihhc3QpIHtcbiAgaWYgKCFhc3QpIHtcbiAgICByZXR1cm4gYXN0O1xuICB9XG5cbiAgdmFyIG1peGlucyA9IFtdO1xuICBlc3RyYXZlcnNlLnRyYXZlcnNlKGFzdCwge1xuICAgIGVudGVyIChub2RlLCBwYXJlbnQpIHtcbiAgICAgIGlmIChub2RlLnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJiBub2RlLm5hbWUgPT09ICdtaXhpbnMnICYmIHBhcmVudC50eXBlID09PSAnUHJvcGVydHknKSB7XG4gICAgICAgIHBhcmVudC52YWx1ZS5lbGVtZW50cy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgIG1peGlucy5wdXNoKGVsLm5hbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJyZWFrKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbWl4aW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZVBhcnNlcihhc3QpIHtcbiAgaWYgKCFhc3QpIHtcbiAgICByZXR1cm4gYXN0O1xuICB9XG5cbiAgdmFyIG5hbWUgPSAnPDxhbm9ueW1vdXM+Pic7XG4gIGVzdHJhdmVyc2UudHJhdmVyc2UoYXN0LCB7XG4gICAgZW50ZXIgKG5vZGUsIHBhcmVudCkge1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmIG5vZGUudmFsdWUgPT09ICdkaXNwbGF5TmFtZScgJiYgcGFyZW50LnR5cGUgPT09ICdQcm9wZXJ0eScpIHtcbiAgICAgICAgbmFtZSA9IHBhcmVudC52YWx1ZS52YWx1ZTtcblxuICAgICAgICB0aGlzLmJyZWFrKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3BzUGFyc2VyKGFzdCwgc291cmNlQ29kZSkge1xuICBpZiAoIWFzdCkge1xuICAgIHJldHVybiBhc3Q7XG4gIH1cblxuICB2YXIgcHJvcHMgPSB7fTtcbiAgZXN0cmF2ZXJzZS50cmF2ZXJzZShhc3QsIHtcbiAgICBlbnRlciAobm9kZSwgcGFyZW50KSB7XG4gICAgICBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicgJiYgbm9kZS5uYW1lID09PSAnUHJvcFR5cGVzJykge1xuICAgICAgICB2YXIgcHJvcFR5cGVzID0gcGFyZW50LnZhbHVlLnByb3BlcnRpZXM7XG5cbiAgICAgICAgcHJvcFR5cGVzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBpdGVtLmtleS5uYW1lO1xuICAgICAgICAgIHZhciBwcm9wVHlwZSA9IGl0ZW0udmFsdWU7XG5cbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSB7fTtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0udHlwZSA9IHNvdXJjZUNvZGUuc2xpY2UocHJvcFR5cGUuc3RhcnQsIHByb3BUeXBlLmVuZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYnJlYWsoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwcm9wcztcbn1cbiJdfQ==